---
import Button from "./Button.astro";
---

<header
  id="header"
  class="fixed inset-x-0 top-0 z-50 bg-white transition-all duration-75 ease-linear"
>
  <div
    class="w-full px-4 md:max-w-[69rem] lg:mx-auto lg:flex lg:items-center lg:justify-between"
  >
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a href="/"
        ><img src="logo.svg" alt="Company Logo" class="h-11 w-auto" /></a
      >
      <!-- Logo End -->

      <!-- Toggle Button -->
      <div class="lg:hidden">
        <button
          type="button"
          class="hs-collapse-toggle flex size-8 items-center justify-center disabled:pointer-events-none disabled:opacity-50"
          id="hs-navbar-example-collapse"
          aria-expanded="false"
          aria-controls="hs-navbar-example"
          aria-label="Toggle navigation"
          data-hs-collapse="#hs-navbar-example"
        >
          <svg
            class="size-6 shrink-0 hs-collapse-open:hidden"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><line x1="3" x2="21" y1="6" y2="6"></line><line
              x1="3"
              x2="21"
              y1="12"
              y2="12"></line><line x1="3" x2="21" y1="18" y2="18"></line></svg
          >
          <svg
            class="hidden size-6 shrink-0 hs-collapse-open:block"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
          >
        </button>
      </div>
      <!-- Toggle Button End -->
    </div>

    <!-- Collapse -->
    <div
      id="hs-navbar-example"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 lg:block"
      aria-labelledby="hs-navbar-example-collapse"
    >
      <nav
        class="flex flex-col py-2 font-medium text-black lg:flex-row lg:items-center lg:justify-end lg:gap-8 lg:py-4 lg:text-base"
      >
        <a
          href="#how"
          class="py-4 transition-colors hover:text-button-primary lg:py-0"
          >How it works</a
        >
        <a
          href="#testimonials"
          class="py-4 transition-colors hover:text-button-primary lg:py-0"
          >Testimonials</a
        >
        <a
          href="#features"
          class="py-4 transition-colors hover:text-button-primary lg:py-0"
          >Features</a
        >
        <a
          href="#pricing"
          class="py-4 transition-colors hover:text-button-primary lg:py-0"
          >Pricing</a
        >
        <a
          href="#login"
          class="py-4 transition-colors hover:text-button-primary lg:py-0"
          >Log in</a
        >
        <div class="flex py-4 lg:py-0">
          <Button
            link="#contact"
            text="Try for free"
            size="small"
            classes="nav-link"
          />
        </div>
      </nav>
    </div>
    <!-- Collapse End -->
  </div>

  <script>
    const getElement = function <T extends HTMLElement>(
      selector: string,
      type: { new (): T }
    ): T {
      const element = document.getElementById(selector);
      if (!element)
        throw new Error(`Element with selector "${selector}" not found.`);
      if (element instanceof type) return element as T;
      throw new Error(
        `Element with selector "${selector}" is not of expected type ${type.name}.`
      );
    };

    const navScrollTo = function (
      event: Event,
      selector: string,
      behavior: ScrollBehavior = "smooth",
      offset: { top?: number; left?: number } = {}
    ) {
      const { target } = event;

      if (!(target instanceof HTMLElement)) return;

      if (!target.matches(selector)) return;

      event.preventDefault();

      const id = target.getAttribute("href");
      if (!id || !id.startsWith("#")) {
        console.error(`Invalid or missing href attribute: ${id}`);
        return;
      }

      const element = document.querySelector(id);
      if (!element) {
        console.error(`Element with ID '${id}' not found in the document`);
        return;
      }

      const coords = element.getBoundingClientRect();
      const scrollY = window.scrollY || window.scrollY;
      const scrollX = window.scrollX || window.scrollX;

      window.scrollTo({
        top: coords.top + scrollY + (offset.top || 0),
        left: coords.left + scrollX + (offset.left || 0),
        behavior,
      });
    };

    const header = getElement<HTMLElement>("header", HTMLElement);

    const headerHeight = header.offsetHeight + 56;

    header.addEventListener("click", event =>
      navScrollTo(event, "a", "smooth", { top: -headerHeight })
    );

    const trigger = getElement<HTMLDivElement>("trigger", HTMLDivElement);

    const stickyNav = function (entries: IntersectionObserverEntry[]) {
      const [entry] = entries;

      if (!entry.isIntersecting) header.classList.remove("pt-4");
      else header.classList.add("pt-4");
    };

    const headerObserver = new IntersectionObserver(stickyNav, {
      root: null,
      threshold: 0,
    });

    headerObserver.observe(trigger);
  </script>
</header>
